type NODE = struct { #val:int, #next:LIST };
type LIST = union { #nil: (), #cons: NODE };
let l0:LIST = #nil (()) ;
let l1:LIST = #cons ( { #val=2, #next=l0}) ;
let l2:LIST = #cons ( { #val=3, #next=l1}) ;
l1;;

type NODE = struct {
        #val:int,
        #next:LIST
};
type LIST = union {
        #nil: (),
        #cons: NODE
};
let l0:LIST = #nil (());
let l1:LIST = #cons ( { #val=2, #next=l0}) ;
let l2:LIST = #cons ( { #val=3, #next=l1}) ;
let plist:LIST->() = fn
    l:LIST => { 
        match l {
        |   #nil(_) -> println (-1000); ()
        |   #cons(n) -> 
                println(n.#val);
                plist (n.#next)
        }
    }
;
plist (l2);;

type NODE = struct {
        #val:int,
        #next:LIST
};
type LIST = union {
        #nil: (),
        #cons: NODE
};
let buildCons: int->LIST->LIST =
    fn v:int, l:LIST => {
            #cons({#val=v, #next=l})
    };
let concat:LIST->LIST->LIST =
    fn a:LIST, b:LIST => { 
        match a {
        |   #nil(_) -> b
        |   #cons(n) -> 
                buildCons (n.#val) (concat (n.#next) (b))
        }
    };
let genlist: int -> LIST =
    fn n:int => {
        if (n==0) { #nil(()) }
        else {
            buildCons (n) (genlist (n-1))
        }
    };
let l0 = genlist (100);
let la = concat (l0) (l0);
la;;
